//#define T

__kernel void reduction( int elem_num, int group_num, __local T *temp, __global T *v ) {
	int global_id = get_global_id(0);
	int local_id = get_local_id(0);
	int group_id = get_group_id(0);
	int local_size = get_local_size(0);
	int stride = local_size * group_num;

	// load to local mem
	T s = 0.0f;
	for ( int i = global_id; i < elem_num; i += stride ) {
		s += v[i];
	}
	temp[local_id] = s;
	barrier(CLK_LOCAL_MEM_FENCE);

	// reduction within group
	for ( int offset = local_size >> 1; offset > 0; offset >>= 1 ) {
		if ( local_id < offset ) {
			temp[local_id] += temp[local_id + offset];
		}
		barrier(CLK_LOCAL_MEM_FENCE);
	}

	if ( local_id == 0 ) {
		v[group_id] = temp[0];
	}
}